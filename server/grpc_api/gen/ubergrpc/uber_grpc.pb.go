// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: uber.proto

package ubergrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UberService_UberRegister_FullMethodName   = "/ubergrpc.UberService/UberRegister"
	UberService_UpdatePosition_FullMethodName = "/ubergrpc.UberService/UpdatePosition"
	UberService_GetRequests_FullMethodName    = "/ubergrpc.UberService/GetRequests"
)

// UberServiceClient is the client API for UberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UberServiceClient interface {
	UberRegister(ctx context.Context, in *UberRegisterDTO, opts ...grpc.CallOption) (*Ackonledgment, error)
	UpdatePosition(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PositionUpdate, emptypb.Empty], error)
	GetRequests(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RequestAnswer, RequestsUpdates], error)
}

type uberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUberServiceClient(cc grpc.ClientConnInterface) UberServiceClient {
	return &uberServiceClient{cc}
}

func (c *uberServiceClient) UberRegister(ctx context.Context, in *UberRegisterDTO, opts ...grpc.CallOption) (*Ackonledgment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ackonledgment)
	err := c.cc.Invoke(ctx, UberService_UberRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uberServiceClient) UpdatePosition(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PositionUpdate, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UberService_ServiceDesc.Streams[0], UberService_UpdatePosition_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PositionUpdate, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UberService_UpdatePositionClient = grpc.ClientStreamingClient[PositionUpdate, emptypb.Empty]

func (c *uberServiceClient) GetRequests(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RequestAnswer, RequestsUpdates], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UberService_ServiceDesc.Streams[1], UberService_GetRequests_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RequestAnswer, RequestsUpdates]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UberService_GetRequestsClient = grpc.BidiStreamingClient[RequestAnswer, RequestsUpdates]

// UberServiceServer is the server API for UberService service.
// All implementations must embed UnimplementedUberServiceServer
// for forward compatibility.
type UberServiceServer interface {
	UberRegister(context.Context, *UberRegisterDTO) (*Ackonledgment, error)
	UpdatePosition(grpc.ClientStreamingServer[PositionUpdate, emptypb.Empty]) error
	GetRequests(grpc.BidiStreamingServer[RequestAnswer, RequestsUpdates]) error
	mustEmbedUnimplementedUberServiceServer()
}

// UnimplementedUberServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUberServiceServer struct{}

func (UnimplementedUberServiceServer) UberRegister(context.Context, *UberRegisterDTO) (*Ackonledgment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UberRegister not implemented")
}
func (UnimplementedUberServiceServer) UpdatePosition(grpc.ClientStreamingServer[PositionUpdate, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method UpdatePosition not implemented")
}
func (UnimplementedUberServiceServer) GetRequests(grpc.BidiStreamingServer[RequestAnswer, RequestsUpdates]) error {
	return status.Errorf(codes.Unimplemented, "method GetRequests not implemented")
}
func (UnimplementedUberServiceServer) mustEmbedUnimplementedUberServiceServer() {}
func (UnimplementedUberServiceServer) testEmbeddedByValue()                     {}

// UnsafeUberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UberServiceServer will
// result in compilation errors.
type UnsafeUberServiceServer interface {
	mustEmbedUnimplementedUberServiceServer()
}

func RegisterUberServiceServer(s grpc.ServiceRegistrar, srv UberServiceServer) {
	// If the following call pancis, it indicates UnimplementedUberServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UberService_ServiceDesc, srv)
}

func _UberService_UberRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UberRegisterDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UberServiceServer).UberRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UberService_UberRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UberServiceServer).UberRegister(ctx, req.(*UberRegisterDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _UberService_UpdatePosition_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UberServiceServer).UpdatePosition(&grpc.GenericServerStream[PositionUpdate, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UberService_UpdatePositionServer = grpc.ClientStreamingServer[PositionUpdate, emptypb.Empty]

func _UberService_GetRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UberServiceServer).GetRequests(&grpc.GenericServerStream[RequestAnswer, RequestsUpdates]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UberService_GetRequestsServer = grpc.BidiStreamingServer[RequestAnswer, RequestsUpdates]

// UberService_ServiceDesc is the grpc.ServiceDesc for UberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ubergrpc.UberService",
	HandlerType: (*UberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UberRegister",
			Handler:    _UberService_UberRegister_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdatePosition",
			Handler:       _UberService_UpdatePosition_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetRequests",
			Handler:       _UberService_GetRequests_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "uber.proto",
}
